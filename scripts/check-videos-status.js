const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function checkVideosStatus() {
  try {
    console.log('üîç Verificando status dos v√≠deos no banco...\n')

    // Estat√≠sticas gerais
    const totalVideos = await prisma.video.count()
    const iframeVideos = await prisma.video.count({
      where: { iframe: true }
    })
    const videosWithTrailer = await prisma.video.count({
      where: {
        trailerUrl: {
          not: null
        }
      }
    })
    const videosWithoutTrailer = await prisma.video.count({
      where: {
        OR: [
          { trailerUrl: null },
          { trailerUrl: '' }
        ]
      }
    })

    console.log('üìä Estat√≠sticas Gerais:')
    console.log(`üìπ Total de v√≠deos: ${totalVideos.toLocaleString()}`)
    console.log(`üé¨ V√≠deos iframe: ${iframeVideos.toLocaleString()} (${((iframeVideos/totalVideos)*100).toFixed(1)}%)`)
    console.log(`üé• V√≠deos com trailer: ${videosWithTrailer.toLocaleString()} (${((videosWithTrailer/totalVideos)*100).toFixed(1)}%)`)
    console.log(`‚ùå V√≠deos sem trailer: ${videosWithoutTrailer.toLocaleString()} (${((videosWithoutTrailer/totalVideos)*100).toFixed(1)}%)`)

    // Verificar alguns v√≠deos de exemplo
    console.log('\nüìã Exemplos de v√≠deos:')
    
    const sampleVideos = await prisma.video.findMany({
      take: 5,
      select: {
        id: true,
        title: true,
        iframe: true,
        trailerUrl: true,
        premium: true
      },
      orderBy: {
        created_at: 'desc'
      }
    })

    sampleVideos.forEach((video, index) => {
      console.log(`\n${index + 1}. ${video.title}`)
      console.log(`   ID: ${video.id}`)
      console.log(`   Iframe: ${video.iframe ? '‚úÖ Sim' : '‚ùå N√£o'}`)
      console.log(`   Trailer: ${video.trailerUrl ? '‚úÖ Sim' : '‚ùå N√£o'}`)
      console.log(`   Premium: ${video.premium ? '‚úÖ Sim' : '‚ùå N√£o'}`)
      if (video.trailerUrl) {
        console.log(`   URL Trailer: ${video.trailerUrl.substring(0, 50)}...`)
      }
    })

    // Verificar v√≠deos iframe sem trailer
    const iframeWithoutTrailer = await prisma.video.count({
      where: {
        iframe: true,
        OR: [
          { trailerUrl: null },
          { trailerUrl: '' }
        ]
      }
    })

    if (iframeWithoutTrailer > 0) {
      console.log(`\n‚ö†Ô∏è  ATEN√á√ÉO: ${iframeWithoutTrailer} v√≠deos iframe sem trailer!`)
    }

    // Verificar v√≠deos com trailer mas n√£o iframe
    const trailerWithoutIframe = await prisma.video.count({
      where: {
        iframe: false,
        trailerUrl: {
          not: null
        }
      }
    })

    if (trailerWithoutIframe > 0) {
      console.log(`‚ö†Ô∏è  ATEN√á√ÉO: ${trailerWithoutIframe} v√≠deos com trailer mas n√£o s√£o iframe!`)
    }

  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkVideosStatus() 